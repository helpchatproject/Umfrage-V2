🔍 Fehleranalyse: "Unbekannte Frage (field.id)"
Die Debugging-Logs zeigen, dass die fields aus der Formularstruktur (formStructure) nicht geladen werden oder nicht mit den answers übereinstimmen. Deshalb zeigt dein Code "❌ Unbekannte Frage (field.id)" an.

🚀 Ursachen & Lösungen
1️⃣ Problem: Formularstruktur wird nicht korrekt geladen
Dein Log zeigt "Fehler beim Laden der Formularstruktur".
Wahrscheinlich ist die API-Antwort kein JSON, sondern eine HTML-Fehlermeldung.
Fix: Prüfe mit console.log(), ob die API wirklich fields enthält.
🔹 Debugging-Code:

tsx
Copy
Edit
const { data: formStructure, error: formError } = useQuery<FormStructure>({
  queryKey: [`/api/typeform/forms/${formId}`],
  queryFn: async () => {
    const res = await fetch(`/api/typeform/forms/${formId}`);
    if (!res.ok) throw new Error("Fehler beim Laden der Formularstruktur");
    
    const data = await res.json();
    console.log("📢 Geladene Formularstruktur:", data);
    return data;
  },
});

// Prüfe, ob `formStructure` tatsächlich geladen wurde
if (formError) console.error("❌ Fehler beim Laden der Fragen:", formError);
if (!formStructure || !formStructure.fields) console.warn("⚠ Formularstruktur ist leer!");
2️⃣ Problem: IDs in fields stimmen nicht mit answers überein
Typeform speichert manchmal ref anstelle von id.
Fix: Suche sowohl mit id als auch mit ref.
🔹 Überarbeitete findQuestionText()

tsx
Copy
Edit
const findQuestionText = (field: { id: string; ref: string }): string => {
  if (!formStructure || !formStructure.fields) {
    console.warn("⚠ Formularstruktur wurde nicht geladen!");
    return `❌ Unbekannte Frage (${field.id})`;
  }

  let questionField = formStructure.fields.find((f) => f.id === field.id);

  // Falls `id` nicht gefunden wurde, probiere `ref`
  if (!questionField) {
    questionField = formStructure.fields.find((f) => f.ref === field.ref);
  }

  return questionField?.title || `❌ Frage nicht gefunden (${field.id})`;
};
3️⃣ Problem: API-Antwort enthält keine fields
Falls formStructure.fields nicht existiert, prüfe die API-Response.

🔹 Debugging für API-Antwort

tsx
Copy
Edit
useEffect(() => {
  fetch(`/api/typeform/forms/${formId}`)
    .then((res) => res.json())
    .then((data) => console.log("📢 API-Antwort für Fragen:", data))
    .catch((err) => console.error("❌ Fehler in API-Antwort:", err));
}, []);
Falls die API-Antwort kein fields-Array enthält, liegt das Problem bei Typeform.

4️⃣ Problem: API gibt HTML-Fehlermeldung statt JSON
Falls du diesen Fehler in der Konsole siehst:

php-template
Copy
Edit
SyntaxError: Unexpected token '<', "<!DOCTYPE HTML>" is not valid JSON
Bedeutet das, dass die API eine HTML-Seite zurückgibt, vermutlich eine Fehlermeldung.

🔹 Fix: Stelle sicher, dass der API-Aufruf korrekt ist

tsx
Copy
Edit
const { data: formStructure, error: formError } = useQuery<FormStructure>({
  queryKey: [`/api/typeform/forms/${formId}`],
  queryFn: async () => {
    const res = await fetch(`/api/typeform/forms/${formId}`, {
      headers: { "Accept": "application/json" }, // 🛠 Stellt sicher, dass die API JSON zurückgibt
    });
    
    if (!res.ok) throw new Error("❌ Fehler beim Abrufen der Fragen.");
    
    const data = await res.json();
    return data;
  },
});
Falls die API trotzdem kein fields zurückgibt, könnte deine API-URL falsch sein.

🚀 Nächste Schritte
1️⃣ Prüfe mit console.log(formStructure), ob fields geladen wird.
2️⃣ Falls nicht, poste die vollständige API-Antwort aus der Konsole.
3️⃣ Falls fields leer ist, prüfe die API-URL und ob der API-Token korrekt ist.

Falls das Problem weiterhin besteht, schicke mir die exakte API-Antwort aus der Konsole! 🚀😊